<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yxxu&#39;s Blog</title>
  
  <subtitle>To Be a Better Me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-18T15:17:00.871Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yxxu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript类数组(ArrayLike)转化成数组</title>
    <link href="http://yoursite.com/2017/10/18/javascript%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E6%88%90%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2017/10/18/javascript类数组转化成数组/</id>
    <published>2017-10-18T13:58:27.000Z</published>
    <updated>2017-10-18T15:17:00.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript类数组转化成数组"><a href="#javascript类数组转化成数组" class="headerlink" title="javascript类数组转化成数组"></a>javascript类数组转化成数组</h1><h2 id="什么是类数组（ArrayLike）？"><a href="#什么是类数组（ArrayLike）？" class="headerlink" title="什么是类数组（ArrayLike）？"></a>什么是类数组（ArrayLike）？</h2><p>ArrayLike（类数组/伪数组）即拥有数组的一部分行为,例如 arguments, NodeList等！他们拥有<strong><em>length</em></strong>属性，但是却不能用一些数组的方法，如 push，pop等等</p><p>常见的ArrayLike有下面的这几个：</p><ul><li>Arguments</li><li>NodeList</li><li>StyleSheetList</li><li>HTMLCollection</li><li>HTMLFormControlsCollection (继承HTMLCollection)</li><li>HTMLOptionsCollection(继承HTMLCollection)</li><li>HTMLAllCollection</li><li>DOMTokenList</li></ul><h2 id="Array-Like-to-Array"><a href="#Array-Like-to-Array" class="headerlink" title="Array-Like to Array"></a>Array-Like to Array</h2><p>在项目开发中，经常遇到需要把 Array-Like Objects 转为 Array 类型，使之能用数组的一些方法。下面列出几种方法：</p><ul><li>for循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++)</div><div class="line">  arr[i] = <span class="built_in">arguments</span>[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><ul><li>Array.prototype.slice.call(array-like object)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><p>或者可以用 <strong><em>[]</em></strong> 代替 Array.prototype</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><p>原理： slice的内部实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//slice的内部实现</span></div><div class="line"><span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">start,end</span>)</span>&#123;  </div><div class="line">      <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();  </div><div class="line">      start = start || <span class="number">0</span>;  </div><div class="line">      end = end || <span class="keyword">this</span>.length; <span class="comment">//this指向调用的对象，当用了call后，能够改变this的指向，也就是指向传进来的对象，这是关键  </span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = start; i &lt; end; i++)&#123;  </div><div class="line">           result.push(<span class="keyword">this</span>[i]);  </div><div class="line">      &#125;  </div><div class="line">      <span class="keyword">return</span> result;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>兼容 IE8 以下的浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> toArray = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;  </div><div class="line">    <span class="keyword">try</span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(s);  </div><div class="line">    &#125; <span class="keyword">catch</span>(e)&#123;  </div><div class="line">            <span class="keyword">var</span> arr = [];  </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = s.length; i &lt; len; i++)&#123;  </div><div class="line">                <span class="comment">//arr.push(s[i]);  </span></div><div class="line">                 arr[i] = s[i];     <span class="comment">//据说这样比push快</span></div><div class="line">            &#125;  </div><div class="line">             <span class="keyword">return</span> arr;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Array.from()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"helloworld"</span>;</div><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(str);</div></pre></td></tr></table></figure><h3 id="Array-Like-to-Array-注意点"><a href="#Array-Like-to-Array-注意点" class="headerlink" title="Array-Like to Array 注意点"></a>Array-Like to Array 注意点</h3><p>arguments 转换成数组的时候经常会把 <strong><em>Array.prototype.slice.call(arguments)</em></strong> 用更短的写法 <strong><em> [].slice.call(arguments)</em></strong></p><p>这个将导致Chrome和Node中使用的V8引擎跳过对其的优化，使其性能相当慢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javascript类数组转化成数组&quot;&gt;&lt;a href=&quot;#javascript类数组转化成数组&quot; class=&quot;headerlink&quot; title=&quot;javascript类数组转化成数组&quot;&gt;&lt;/a&gt;javascript类数组转化成数组&lt;/h1&gt;&lt;h2 id=&quot;什
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/16/hello-world/"/>
    <id>http://yoursite.com/2017/10/16/hello-world/</id>
    <published>2017-10-16T13:20:10.838Z</published>
    <updated>2017-10-16T13:20:10.838Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
