<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yxxu&#39;s Blog</title>
  
  <subtitle>To Be a Better Me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-25T13:54:01.900Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yxxu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/2017/10/25/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/10/25/跨域/</id>
    <published>2017-10-25T13:06:03.000Z</published>
    <updated>2017-10-25T13:54:01.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript跨域总结与解决办法"><a href="#JavaScript跨域总结与解决办法" class="headerlink" title="JavaScript跨域总结与解决办法"></a>JavaScript跨域总结与解决办法</h1><ul><li>什么是跨域</li><li>document.domain+iframe的设置</li><li>动态创建script</li><li>利用iframe和location.hash</li><li>window.name实现的跨域数据传输</li><li>使用HTML5 postMessage</li><li>利用flash</li></ul><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦</p><table><thead><tr><th>URL</th><th>说明</th><th>是否允许通信</th></tr></thead><tbody><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a> <a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td><td>同一域名下</td><td>允许</td></tr><tr><td><a href="http://www.a.com/lab/a.js" target="_blank" rel="external">http://www.a.com/lab/a.js</a>  <a href="http://www.a.com/script/b.js" target="_blank" rel="external">http://www.a.com/script/b.js</a></td><td>同一域名下不同文件夹</td><td>允许</td></tr><tr><td><a href="http://www.a.com:8000/a.js" target="_blank" rel="external">http://www.a.com:8000/a.js</a>    <a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td><td>同一域名，不同端口</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a>  <a href="https://www.a.com/b.js" target="_blank" rel="external">https://www.a.com/b.js</a></td><td>同一域名，不同协议</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a> <a href="http://70.32.92.74/b.js" target="_blank" rel="external">http://70.32.92.74/b.js</a></td><td>域名和域名对应ip</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a>  <a href="http://script.a.com/b.js" target="_blank" rel="external">http://script.a.com/b.js</a></td><td>主域相同，子域不同</td><td>不允许</td></tr><tr><td><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a>  <a href="http://a.com/b.js" target="_blank" rel="external">http://a.com/b.js</a></td><td>同一域名，不同二级域名（同上）</td><td>不允许（cookie这种情况下也不允许访问）</td></tr><tr><td><a href="http://www.cnblogs.com/a.js" target="_blank" rel="external">http://www.cnblogs.com/a.js</a>    <a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td><td>不同域名</td><td>不允许</td></tr></tbody></table><a id="more"></a><p>特别注意两点：<br>第一，如果是协议和端口造成的跨域问题“前台”是无能为力的，<br>第二：在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。</p><p>“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match</p><h5 id="1-document-domain-iframe的设置"><a href="#1-document-domain-iframe的设置" class="headerlink" title="1. document.domain+iframe的设置"></a>1. document.domain+iframe的设置</h5><p>对于主域相同而子域不同的例子，可以通过设置document.domain的办法来解决</p><p>www.a.com上的a.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</div><div class="line"><span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">ifr.src = <span class="string">'http://script.a.com/b.html'</span>;</div><div class="line">ifr.style.display = <span class="string">'none'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(ifr);</div><div class="line">ifr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> doc = ifr.contentDocument || ifr.contentWindow.document;</div><div class="line">    <span class="comment">// 在这里操纵b.html</span></div><div class="line">    alert(doc.getElementsByTagName(<span class="string">"h1"</span>)[<span class="number">0</span>].childNodes[<span class="number">0</span>].nodeValue);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>script.a.com上的b.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.domain = <span class="string">'a.com'</span>;</div></pre></td></tr></table></figure><p>问题：<br>1、安全性，当一个站点（b.a.com）被攻击后，另一个站点（c.a.com）会引起安全漏洞。<br>2、如果一个页面中引入多个iframe，要想能够操作所有iframe，必须都得设置相同domain。</p><h5 id="2-动态创建script"><a href="#2-动态创建script" class="headerlink" title="2. 动态创建script"></a>2. 动态创建script</h5><p>这里判断script节点加载完毕还是蛮有意思的：ie只能通过script的readystatechange属性，其它浏览器是script的load事件。以下是部分判断script加载完毕的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">js.onload = js.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.readyState || <span class="keyword">this</span>.readyState === <span class="string">'loaded'</span> || <span class="keyword">this</span>.readyState === <span class="string">'complete'</span>) &#123;</div><div class="line">        <span class="comment">// callback在此处执行</span></div><div class="line">        js.onload = js.onreadystatechange = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h5 id="3-利用iframe和location-hash"><a href="#3-利用iframe和location-hash" class="headerlink" title="3. 利用iframe和location.hash"></a>3. 利用iframe和location.hash</h5><p>原理是利用location.hash来进行传值。在url： <a href="http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可以利用hash值来进行数据传递，当然数据容量是有限的。" target="_blank" rel="external">http://a.com#helloword中的‘#helloworld’就是location.hash，改变hash并不会导致页面刷新，所以可以利用hash值来进行数据传递，当然数据容量是有限的。</a></p><p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息，cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面，这时的hash值可以做参数传递用。cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据（由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe；Firefox可以修改）。同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一点有变化则获取获取hash值。</p><p>先是a.com下的文件cs1.html文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRequest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    ifr.style.display = <span class="string">'none'</span>;</div><div class="line">    ifr.src = <span class="string">'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo'</span>;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(ifr);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkHash</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> data = location.hash ? location.hash.substring(<span class="number">1</span>) : <span class="string">''</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">console</span>.log) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Now the data is '</span>+data);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;;</div><div class="line">&#125;</div><div class="line">setInterval(checkHash, <span class="number">2000</span>);</div></pre></td></tr></table></figure><p>cnblogs.com域名下的cs2.html:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//模拟一个简单的参数处理操作</span></div><div class="line"><span class="keyword">switch</span>(location.hash)&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'#paramdo'</span>:</div><div class="line">        callBack();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'#paramset'</span>:</div><div class="line">        <span class="comment">//do something……</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">callBack</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        parent.location.hash = <span class="string">'somedata'</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        <span class="comment">// ie、chrome的安全机制无法修改parent.location.hash，</span></div><div class="line">        <span class="comment">// 所以要利用一个中间的cnblogs域下的代理iframe</span></div><div class="line">        <span class="keyword">var</span> ifrproxy = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">        ifrproxy.style.display = <span class="string">'none'</span>;</div><div class="line">        ifrproxy.src = <span class="string">'http://a.com/test/cscript/cs3.html#somedata'</span>;    <span class="comment">// 注意该文件在"a.com"域下</span></div><div class="line">        <span class="built_in">document</span>.body.appendChild(ifrproxy);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>a.com下的域名cs3.html</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值</span></div><div class="line">parent.parent.location.hash = self.location.hash.substring(<span class="number">1</span>);</div></pre></td></tr></table></figure><p>当然这样做也存在很多缺点，诸如数据直接暴露在了url中，数据容量和类型都有限等……</p><h5 id="4-window-name实现的跨域数据传输"><a href="#4-window-name实现的跨域数据传输" class="headerlink" title="4. window.name实现的跨域数据传输"></a>4. window.name实现的跨域数据传输</h5><p>有三个页面：</p><p>a.com/app.html：应用页面。<br>a.com/proxy.html：代理文件，一般是一个没有任何内容的html文件，需要和应用页面在同一域下。<br>b.com/data.html：应用页面需要获取数据的页面，可称为数据页面。</p><ol><li>在应用页面（a.com/app.html）中创建一个iframe，把其src指向数据页面（b.com/data.html）。<br>数据页面会把数据附加到这个iframe的window.name上</li></ol><p>data.html 代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="built_in">window</span>.name = <span class="string">'I was there!'</span>;    <span class="comment">// 这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右</span></div><div class="line">    <span class="comment">//// 数据格式可以自定义，如json、字符串</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p><p>在应用页面（a.com/app.html）中监听iframe的onload事件，在此事件中设置这个iframe的src指向本地域的代理文件（代理文件和应用页面在同一域下，所以可以相互通信）。</p><p>app.html部分代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> state = <span class="number">0</span>, </div><div class="line">    iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>),</div><div class="line">    loadfn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">var</span> data = iframe.contentWindow.name;    <span class="comment">// 读取数据</span></div><div class="line">            alert(data);    <span class="comment">//弹出'I was there!'</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</div><div class="line">            state = <span class="number">1</span>;</div><div class="line">            iframe.contentWindow.location = <span class="string">"http://a.com/proxy.html"</span>;    <span class="comment">// 设置的代理文件</span></div><div class="line">        &#125;  </div><div class="line">    &#125;;</div><div class="line">    iframe.src = <span class="string">'http://b.com/data.html'</span>;</div><div class="line">    <span class="keyword">if</span> (iframe.attachEvent) &#123;</div><div class="line">        iframe.attachEvent(<span class="string">'onload'</span>, loadfn);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        iframe.onload  = loadfn;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    iframe.contentWindow.document.write(<span class="string">''</span>);</div><div class="line">    iframe.contentWindow.close();</div><div class="line">    <span class="built_in">document</span>.body.removeChild(iframe);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h5 id="5-使用HTML5-postMessage"><a href="#5-使用HTML5-postMessage" class="headerlink" title="5. 使用HTML5 postMessage"></a>5. 使用HTML5 postMessage</h5><p>Chrome 2.0+、Internet Explorer 8.0+, Firefox 3.0+, Opera 9.6+, 和 Safari 4.0+  支持这个API</p><p>otherWindow.postMessage(message, targetOrigin);<br>otherWindow: 对接收信息页面的window的引用。可以是页面中iframe的contentWindow属性；window.open的返回值；通过name或下标从window.frames取到的值。<br>message: 所要发送的数据，string类型。<br>targetOrigin: 用于限制otherWindow，“*”表示不作限制</p><p>a.com/index.html中的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;iframe id=<span class="string">"ifr"</span> src=<span class="string">"b.com/index.html"</span>&gt;&lt;/iframe&gt;</div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> ifr = <span class="built_in">document</span>.getElementById(<span class="string">'ifr'</span>);</div><div class="line">    <span class="keyword">var</span> targetOrigin = <span class="string">'http://b.com'</span>;  <span class="comment">// 若写成'http://b.com/c/proxy.html'效果一样</span></div><div class="line">                                        <span class="comment">// 若写成'http://c.com'就不会执行postMessage了</span></div><div class="line">    ifr.contentWindow.postMessage(<span class="string">'I was there!'</span>, targetOrigin);</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>b.com/index.html中的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">        <span class="comment">// 通过origin属性判断消息来源地址</span></div><div class="line">        <span class="keyword">if</span> (event.origin == <span class="string">'http://a.com'</span>) &#123;</div><div class="line">            alert(event.data);    <span class="comment">// 弹出"I was there!"</span></div><div class="line">            alert(event.source);  <span class="comment">// 对a.com、index.html中window对象的引用</span></div><div class="line">             <span class="comment">// 但由于同源策略，这里event.source不可以访问window对象</span></div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="literal">false</span>);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript跨域总结与解决办法&quot;&gt;&lt;a href=&quot;#JavaScript跨域总结与解决办法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript跨域总结与解决办法&quot;&gt;&lt;/a&gt;JavaScript跨域总结与解决办法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;什么是跨域&lt;/li&gt;
&lt;li&gt;document.domain+iframe的设置&lt;/li&gt;
&lt;li&gt;动态创建script&lt;/li&gt;
&lt;li&gt;利用iframe和location.hash&lt;/li&gt;
&lt;li&gt;window.name实现的跨域数据传输&lt;/li&gt;
&lt;li&gt;使用HTML5 postMessage&lt;/li&gt;
&lt;li&gt;利用flash&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨域&lt;/h3&gt;&lt;p&gt;JavaScript出于安全方面的考虑，不允许跨域调用其他页面的对象。但在安全限制的同时也给注入iframe或是ajax应用上带来了不少麻烦&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;th&gt;是否允许通信&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/a.js&lt;/a&gt; &lt;a href=&quot;http://www.a.com/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同一域名下&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/lab/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/lab/a.js&lt;/a&gt;  &lt;a href=&quot;http://www.a.com/script/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/script/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同一域名下不同文件夹&lt;/td&gt;
&lt;td&gt;允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com:8000/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com:8000/a.js&lt;/a&gt;    &lt;a href=&quot;http://www.a.com/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同一域名，不同端口&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/a.js&lt;/a&gt;  &lt;a href=&quot;https://www.a.com/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同一域名，不同协议&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/a.js&lt;/a&gt; &lt;a href=&quot;http://70.32.92.74/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://70.32.92.74/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;域名和域名对应ip&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/a.js&lt;/a&gt;  &lt;a href=&quot;http://script.a.com/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://script.a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;主域相同，子域不同&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.a.com/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/a.js&lt;/a&gt;  &lt;a href=&quot;http://a.com/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;同一域名，不同二级域名（同上）&lt;/td&gt;
&lt;td&gt;不允许（cookie这种情况下也不允许访问）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.cnblogs.com/a.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/a.js&lt;/a&gt;    &lt;a href=&quot;http://www.a.com/b.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.a.com/b.js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;不同域名&lt;/td&gt;
&lt;td&gt;不允许&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript类数组(ArrayLike)转化成数组</title>
    <link href="http://yoursite.com/2017/10/18/javascript%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E6%88%90%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2017/10/18/javascript类数组转化成数组/</id>
    <published>2017-10-18T13:58:27.000Z</published>
    <updated>2017-10-25T13:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javascript类数组转化成数组"><a href="#javascript类数组转化成数组" class="headerlink" title="javascript类数组转化成数组"></a>javascript类数组转化成数组</h1><h2 id="什么是类数组（ArrayLike）？"><a href="#什么是类数组（ArrayLike）？" class="headerlink" title="什么是类数组（ArrayLike）？"></a>什么是类数组（ArrayLike）？</h2><p>ArrayLike（类数组/伪数组）即拥有数组的一部分行为,例如 arguments, NodeList等！他们拥有<strong><em>length</em></strong>属性，但是却不能用一些数组的方法，如 push，pop等等</p><p>常见的ArrayLike有下面的这几个：</p><ul><li>Arguments</li><li>NodeList</li><li>StyleSheetList</li><li>HTMLCollection</li><li>HTMLFormControlsCollection (继承HTMLCollection)</li><li>HTMLOptionsCollection(继承HTMLCollection)</li><li>HTMLAllCollection</li><li>DOMTokenList</li></ul><a id="more"></a><h2 id="Array-Like-to-Array"><a href="#Array-Like-to-Array" class="headerlink" title="Array-Like to Array"></a>Array-Like to Array</h2><p>在项目开发中，经常遇到需要把 Array-Like Objects 转为 Array 类型，使之能用数组的一些方法。下面列出几种方法：</p><ul><li>for循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++)</div><div class="line">  arr[i] = <span class="built_in">arguments</span>[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><ul><li>Array.prototype.slice.call(array-like object)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><p>或者可以用 <strong><em>[]</em></strong> 代替 Array.prototype</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> arr = [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><p>原理： slice的内部实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//slice的内部实现</span></div><div class="line"><span class="built_in">Array</span>.prototype.slice = <span class="function"><span class="keyword">function</span>(<span class="params">start,end</span>)</span>&#123;  </div><div class="line">      <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();  </div><div class="line">      start = start || <span class="number">0</span>;  </div><div class="line">      end = end || <span class="keyword">this</span>.length; <span class="comment">//this指向调用的对象，当用了call后，能够改变this的指向，也就是指向传进来的对象，这是关键  </span></div><div class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = start; i &lt; end; i++)&#123;  </div><div class="line">           result.push(<span class="keyword">this</span>[i]);  </div><div class="line">      &#125;  </div><div class="line">      <span class="keyword">return</span> result;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>兼容 IE8 以下的浏览器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> toArray = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;  </div><div class="line">    <span class="keyword">try</span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(s);  </div><div class="line">    &#125; <span class="keyword">catch</span>(e)&#123;  </div><div class="line">            <span class="keyword">var</span> arr = [];  </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = s.length; i &lt; len; i++)&#123;  </div><div class="line">                <span class="comment">//arr.push(s[i]);  </span></div><div class="line">                 arr[i] = s[i];     <span class="comment">//据说这样比push快</span></div><div class="line">            &#125;  </div><div class="line">             <span class="keyword">return</span> arr;  </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Array.from()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"helloworld"</span>;</div><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(str);</div></pre></td></tr></table></figure><h3 id="Array-Like-to-Array-注意点"><a href="#Array-Like-to-Array-注意点" class="headerlink" title="Array-Like to Array 注意点"></a>Array-Like to Array 注意点</h3><p>arguments 转换成数组的时候经常会把 <strong><em>Array.prototype.slice.call(arguments)</em></strong> 用更短的写法 <strong><em> [].slice.call(arguments)</em></strong></p><p>这个将导致Chrome和Node中使用的V8引擎跳过对其的优化，使其性能相当慢。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript类数组转化成数组&quot;&gt;&lt;a href=&quot;#javascript类数组转化成数组&quot; class=&quot;headerlink&quot; title=&quot;javascript类数组转化成数组&quot;&gt;&lt;/a&gt;javascript类数组转化成数组&lt;/h1&gt;&lt;h2 id=&quot;什么是类数组（ArrayLike）？&quot;&gt;&lt;a href=&quot;#什么是类数组（ArrayLike）？&quot; class=&quot;headerlink&quot; title=&quot;什么是类数组（ArrayLike）？&quot;&gt;&lt;/a&gt;什么是类数组（ArrayLike）？&lt;/h2&gt;&lt;p&gt;ArrayLike（类数组/伪数组）即拥有数组的一部分行为,例如 arguments, NodeList等！他们拥有&lt;strong&gt;&lt;em&gt;length&lt;/em&gt;&lt;/strong&gt;属性，但是却不能用一些数组的方法，如 push，pop等等&lt;/p&gt;
&lt;p&gt;常见的ArrayLike有下面的这几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arguments&lt;/li&gt;
&lt;li&gt;NodeList&lt;/li&gt;
&lt;li&gt;StyleSheetList&lt;/li&gt;
&lt;li&gt;HTMLCollection&lt;/li&gt;
&lt;li&gt;HTMLFormControlsCollection (继承HTMLCollection)&lt;/li&gt;
&lt;li&gt;HTMLOptionsCollection(继承HTMLCollection)&lt;/li&gt;
&lt;li&gt;HTMLAllCollection&lt;/li&gt;
&lt;li&gt;DOMTokenList&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/16/hello-world/"/>
    <id>http://yoursite.com/2017/10/16/hello-world/</id>
    <published>2017-10-16T13:20:10.838Z</published>
    <updated>2017-10-16T13:20:10.838Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
